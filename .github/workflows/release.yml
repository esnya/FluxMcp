name: Release Build

on:
  push:
    branches:
      - master
      - ci

env:
  MAIN_PROJECT: FluxMcp
  ARTIFACT_NAME: FluxMcp.dll

permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Get version
        id: version
        run: |
          VERSION=$(awk 'match($0, /<Version>([^<]+)<\/Version>/, a) { print a[1]; exit }' Directory.Build.props)
          
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=v$VERSION" >> "$GITHUB_OUTPUT"
          

      - name: Check if release needed
        id: check
        run: |
          git fetch --tags
          
          tag='${{ steps.version.outputs.tag }}'
          
          if git rev-parse -q --verify "refs/tags/$tag" >/dev/null; then
            echo "should-release=false" >> "$GITHUB_OUTPUT"
            echo "Tag $tag already exists"
          else
            echo "should-release=true" >> "$GITHUB_OUTPUT"
            echo "New release needed: $tag"
          fi
      
      - name: Setup build environment
        id: build-env
        uses: resonite-modding-group/setup-resonite-env-action@v0.1.0
        with:
          steam-user: ${{ secrets.STEAMUSER }}
          steam-password: ${{ secrets.STEAMPASS }}

      - name: Install ResoniteModLoader and Harmony
        run: |
          set -euo pipefail
          LIBS_PATH="${{ steps.build-env.outputs.libraries-path }}"
          RESONITE_DIR="$(dirname "${LIBS_PATH}")"
          echo "Resonite Libraries: ${LIBS_PATH}"
          echo "Resonite Dir: ${RESONITE_DIR}"
          mkdir -p "${LIBS_PATH}" "${RESONITE_DIR}/rml_libs"
          curl -fsSL -o "${LIBS_PATH}/ResoniteModLoader.dll" \
            https://github.com/resonite-modding-group/ResoniteModLoader/releases/latest/download/ResoniteModLoader.dll
          if ! curl -fsSL -o "${RESONITE_DIR}/rml_libs/0Harmony.dll" \
            https://github.com/resonite-modding-group/ResoniteModLoader/releases/latest/download/0Harmony.dll; then
            curl -fsSL -o "${RESONITE_DIR}/0Harmony.dll" \
              https://github.com/resonite-modding-group/ResoniteModLoader/releases/latest/download/0Harmony.dll
          fi

      - name: Restore the application
        run: |
          RESONITE_DIR="$(dirname "${{ steps.build-env.outputs.libraries-path }}")"
          dotnet restore FluxMcp/FluxMcp.csproj --disable-parallel -tl:off \
            -p:ResonitePath="${RESONITE_DIR}/"

      - name: List installed packages
        run: dotnet list FluxMcp/FluxMcp.csproj package --include-transitive

      - name: Build the application
        run: |
          RESONITE_DIR="$(dirname "${{ steps.build-env.outputs.libraries-path }}")"
          dotnet build FluxMcp/FluxMcp.csproj \
            --configuration Release \
            --no-restore \
            --disable-parallel \
            -p:ResonitePath="${RESONITE_DIR}/" \
            -v:d

      - name: Prepare rml_libs directory structure
        run: |
          set -euo pipefail
          RELEASE_DIR="${{ github.workspace }}/release"
          OUT_DIR="${{ github.workspace }}/FluxMcp/bin/Release/net9.0"
          mkdir -p "${RELEASE_DIR}/rml_libs"
          # Copy required libs if present
          for f in ModelContextProtocol.dll Microsoft.Extensions.AI.Abstractions.dll; do
            if [ -f "${OUT_DIR}/${f}" ]; then
              cp "${OUT_DIR}/${f}" "${RELEASE_DIR}/rml_libs/"
            fi
          done

      - name: Create rml_libs.zip
        run: |
          cd "${{ github.workspace }}/release"
          zip -r "rml_libs.zip" "rml_libs"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ github.workspace }}/FluxMcp/bin/Release/net9.0/${{ env.ARTIFACT_NAME }}

      - name: Upload rml_libs artifact
        uses: actions/upload-artifact@v4
        with:
          name: rml_libs
          path: ${{ github.workspace }}/release/rml_libs.zip

      - name: Test
        run: |
          dotnet test FluxMcp.Tests/FluxMcp.Tests.csproj --configuration StubRelease -tl:off


  release:
    if: needs.build.outputs.should-release == 'true'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./artifacts

      - name: Download rml_libs artifact
        uses: actions/download-artifact@v4
        with:
          name: rml_libs
          path: ./artifacts

      - name: Create tag
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag "${{ needs.build.outputs.tag }}"
          git push origin "${{ needs.build.outputs.tag }}"

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.tag }}
          name: Release ${{ needs.build.outputs.version }}
          files: |
            artifacts/${{ env.ARTIFACT_NAME }}
            artifacts/rml_libs.zip
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version, '-') }}
