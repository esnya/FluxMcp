name: Release Build

on:
  push:
    branches:
      - master
      - ci

env:
  MAIN_PROJECT: FluxMcp
  ARTIFACT_NAME: FluxMcp.dll
  RESONITE_PATH: ${{ github.workspace }}/../Resonite

permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          $VERSION = (Select-String -Path "Directory.Build.props" -Pattern "<Version>([^<]+)</Version>").Matches[0].Groups[1].Value
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $env:GITHUB_OUTPUT

      - name: Check if release needed
        id: check
        run: |
          git fetch --tags
          $tagExists = git tag -l "${{ steps.version.outputs.tag }}"
          if ($tagExists) {
            echo "should-release=false" >> $env:GITHUB_OUTPUT
            Write-Host "Tag ${{ steps.version.outputs.tag }} already exists"
          } else {
            echo "should-release=true" >> $env:GITHUB_OUTPUT
            Write-Host "New release needed: ${{ steps.version.outputs.tag }}"
          }
      
      - name: Setup build environment
        id: build-env
        uses: resonite-modding-group/setup-resonite-env-action@v0.1.0
        with:
          steam-user: ${{ secrets.STEAMUSER }}
          steam-password: ${{ secrets.STEAMPASS }}

      - name: Restore the application
        shell: pwsh
        run: dotnet restore FluxMcp/FluxMcp.csproj --disable-parallel -tl:off

      - name: List installed packages
        shell: pwsh
        run: dotnet list FluxMcp/FluxMcp.csproj package --include-transitive

      - name: Build the application
        shell: pwsh
        run: dotnet build FluxMcp/FluxMcp.csproj --disable-parallel -tl:off --configuration=Release --no-restore --output ${{ github.workspace }}/bin/Release -v:d

      - name: Prepare rml_libs directory structure
        shell: pwsh
        run: |
          mkdir -P "${{ github.workspace }}/release/rml_libs"
          cp "${{ github.workspace }}/bin/Release/ModelContextProtocol.dll" "${{ github.workspace }}/bin/Release/ModelContextProtocol.dll" "${{ github.workspace }}/release/rml_libs"

      - name: Create rml_libs.zip
        shell: pwsh
        run: |
          zip -r "${{ github.workspace }}/release/rml_libs" "${{ github.workspace }}/release/rml_libs.zip"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ github.workspace }}/bin/Release/${{ env.ARTIFACT_NAME }}

      - name: Upload rml_libs artifact
        uses: actions/upload-artifact@v4
        with:
          name: rml_libs
          path: ${{ github.workspace }}/release/rml_libs.zip

      - name: Test
        run: |
          dotnet test FluxMcp.Tests/FluxMcp.Tests.csproj --configuration Debug -tl:off


  release:
    if: needs.build.outputs.should-release == 'true'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./artifacts

      - name: Download rml_libs artifact
        uses: actions/download-artifact@v4
        with:
          name: rml_libs
          path: ./artifacts

      - name: Create tag
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag "${{ needs.build.outputs.tag }}"
          git push origin "${{ needs.build.outputs.tag }}"

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.tag }}
          name: Release ${{ needs.build.outputs.version }}
          files: |
            artifacts/${{ env.ARTIFACT_NAME }}
            artifacts/rml_libs.zip
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version, '-') }}
