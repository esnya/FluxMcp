name: Release Build

on:
  push:
    branches:
      - master
      - ci

env:
  MAIN_PROJECT: FluxMcp
  ARTIFACT_NAME: FluxMcp.dll
  RESONITE_PATH: ${{ github.workspace }}/../Resonite

permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          $VERSION = (Select-String -Path "Directory.Build.props" -Pattern "<Version>([^<]+)</Version>").Matches[0].Groups[1].Value
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $env:GITHUB_OUTPUT

      - name: Check if release needed
        id: check
        run: |
          git fetch --tags
          $tagExists = git tag -l "${{ steps.version.outputs.tag }}"
          if ($tagExists) {
            echo "should-release=false" >> $env:GITHUB_OUTPUT
            Write-Host "Tag ${{ steps.version.outputs.tag }} already exists"
          } else {
            echo "should-release=true" >> $env:GITHUB_OUTPUT
            Write-Host "New release needed: ${{ steps.version.outputs.tag }}"
          }

      - name: Setup .NET Framework (msbuild)
        uses: microsoft/setup-msbuild@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0'

      - name: Setup SteamCMD
        uses: CyberAndrii/setup-steamcmd@v1.2.0

      - name: Cache app
        uses: actions/cache@v4
        with:
          path: ${{ env.RESONITE_PATH }}
          key: rml-mod-${{ env.MAIN_PROJECT }}-${{ runner.os }}

      - name: Update app
        shell: pwsh
        run: steamcmd +force_install_dir ${{ env.RESONITE_PATH }} +login ${{ secrets.STEAMLOGIN }} +app_update 2519830 validate +quit

      - name: Prepare directories
        shell: pwsh
        run: |
          mkdir -p ${{ env.RESONITE_PATH }}/Libraries/
          mkdir -p ${{ env.RESONITE_PATH }}/rml_libs/
        continue-on-error: true

      - name: Install ResoniteModLoader
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://github.com/resonite-modding-group/ResoniteModLoader/releases/latest/download/ResoniteModLoader.dll -OutFile ${{ env.RESONITE_PATH }}/Libraries/ResoniteModLoader.dll
          Invoke-WebRequest -Uri https://github.com/resonite-modding-group/ResoniteModLoader/releases/latest/download/0Harmony.dll -OutFile ${{ env.RESONITE_PATH }}/rml_libs/0Harmony.dll

          Invoke-WebRequest -Uri https://github.com/Nytra/ResoniteHotReloadLib/releases/download/v3.0.0/HotReloadLib.3.0.0.RML.zip -OutFile ${{ env.RESONITE_PATH }}/rml_libs/HotReloadLib.3.0.0.RML.zip
          Expand-Archive -Path ${{ env.RESONITE_PATH }}/rml_libs/HotReloadLib.3.0.0.RML.zip -DestinationPath ${{ env.RESONITE_PATH }}/rml_libs/ -Force
          Remove-Item -Path ${{ env.RESONITE_PATH }}/rml_libs/HotReloadLib.3.0.0.RML.zip

      - name: Restore the application
        shell: pwsh
        run: dotnet restore FluxMcp/FluxMcp.csproj --disable-parallel -tl:off

      - name: List installed packages
        shell: pwsh
        run: dotnet list FluxMcp/FluxMcp.csproj package --include-transitive

      - name: Build the application
        shell: pwsh
        run: dotnet build FluxMcp/FluxMcp.csproj --disable-parallel -tl:off --configuration=Release --no-restore --output ${{ github.workspace }}/bin/Release -v:d

      - name: Prepare rml_libs directory structure
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/release/rml_libs"

          # Copy NuGet dependencies based on DllsToCopy property
          $dllsToCopy = @("ModelContextProtocol.dll", "Microsoft.Extensions.AI.Abstractions.dll")
          foreach ($dll in $dllsToCopy) {
            $sourcePath = "${{ github.workspace }}/bin/Release/$dll"
            if (Test-Path $sourcePath) {
              Copy-Item $sourcePath -Destination "${{ github.workspace }}/release/rml_libs/" -Force
              Write-Host "Copied $dll to rml_libs"
            } else {
              Write-Warning "$dll not found at $sourcePath"
            }
          }

      - name: Create rml_libs.zip
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ github.workspace }}/release/rml_libs" -DestinationPath "${{ github.workspace }}/release/rml_libs.zip"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ github.workspace }}/bin/Release/${{ env.ARTIFACT_NAME }}

      - name: Upload rml_libs artifact
        uses: actions/upload-artifact@v4
        with:
          name: rml_libs
          path: ${{ github.workspace }}/release/rml_libs.zip

      - name: Test
        run: |
          dotnet test FluxMcp.Tests/FluxMcp.Tests.csproj --configuration Debug -tl:off


  release:
    if: needs.build.outputs.should-release == 'true'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./artifacts

      - name: Download rml_libs artifact
        uses: actions/download-artifact@v4
        with:
          name: rml_libs
          path: ./artifacts

      - name: Create tag
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag "${{ needs.build.outputs.tag }}"
          git push origin "${{ needs.build.outputs.tag }}"

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.tag }}
          name: Release ${{ needs.build.outputs.version }}
          files: |
            artifacts/${{ env.ARTIFACT_NAME }}
            artifacts/rml_libs.zip
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version, '-') }}
