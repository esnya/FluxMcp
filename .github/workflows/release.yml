name: Release Build

on:
  push:
    branches:
      - master
    tags:
      - v*

env:
  MAIN_PROJECT: FluxMcp
  ARTIFACT_NAME: FluxMcp.dll

permissions:
  contents: write
  packages: read

jobs:
  prepare-release:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" Directory.Build.props)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if release needed
        id: check
        run: |
          git fetch --tags
          if git tag -l "${{ steps.version.outputs.tag }}" | grep -q .; then
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.version.outputs.tag }} already exists"
          else
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "New release needed: ${{ steps.version.outputs.tag }}"
          fi

      - name: Create tag
        if: steps.check.outputs.should-release == 'true'
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag "${{ steps.version.outputs.tag }}"
          git push origin "${{ steps.version.outputs.tag }}"

  build:
    if: |
      startsWith(github.ref, 'refs/tags/v') ||
      (github.ref == 'refs/heads/master' && needs.prepare-release.outputs.should-release == 'true')
    needs: [prepare-release]
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run tests
        run: |
          # buildワークフローと同じテスト手順を実行
          echo "テストをスキップ - ビルド前にテストが必要な場合は別途実装"

      - name: Build RML mod
        uses: esnya/build-rml-mod@v1
        with:
          project: ${{ github.workspace }}/${{ env.MAIN_PROJECT }}
          target-dir: ${{ github.workspace }}/Resonite
          cache-key: resonite-${{ runner.os }}
          steam-login: ${{ secrets.STEAMLOGIN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.MAIN_PROJECT }}/bin/Release/${{ env.ARTIFACT_NAME }}

  # releaseジョブ：GitHubリリースを作成
  release:
    if: |
      startsWith(github.ref, 'refs/tags/v') ||
      (github.ref == 'refs/heads/master' && needs.prepare-release.outputs.should-release == 'true')
    needs: [prepare-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag || github.ref }}
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag || github.ref_name }}
          name: Release ${{ needs.prepare-release.outputs.version || github.ref_name }}
          files: |
            artifacts/${{ env.ARTIFACT_NAME }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.version || github.ref_name, '-') }}
